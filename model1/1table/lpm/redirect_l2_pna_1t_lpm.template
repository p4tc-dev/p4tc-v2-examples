#!/bin/bash -x

set -e

# Create pipeline
$TC p4template create pipeline/redirect_l2_pna_1t_lpm numtables 1 pipeid 1

#########################
# Defining Header Fields#
#########################
# Create header field object from ipv4 destination address
# Note the "redirect_l2_pna_1t_lpm_parser" was declared earlier in the parser script
$TC p4template create hdrfield/redirect_l2_pna_1t_lpm/redirect_l2_pna_1t_lpm_parser/ethernet/dstAddr hdrfieldid 1 type macaddr
$TC p4template create hdrfield/redirect_l2_pna_1t_lpm/redirect_l2_pna_1t_lpm_parser/ethernet/srcAddr hdrfieldid 2 type macaddr
$TC p4template create hdrfield/redirect_l2_pna_1t_lpm/redirect_l2_pna_1t_lpm_parser/ethernet/etherType hdrfieldid 3 type be16
$TC p4template create hdrfield/redirect_l2_pna_1t_lpm/redirect_l2_pna_1t_lpm_parser/ipv4/dstAddr hdrfieldid 4 type ipv4
$TC p4template create hdrfield/redirect_l2_pna_1t_lpm/redirect_l2_pna_1t_lpm_parser/ipv4/srcAddr hdrfieldid 5 type ipv4

####################
# Defining Metadata#
####################
echo "creating metadata"
#sleep 1
$TC p4template create metadata/redirect_l2_pna_1t_lpm/global/drop mid 4 type bit1
#Metadata for egress port
$TC p4template create metadata/redirect_l2_pna_1t_lpm/output_port mid 8 type dev

echo "dumping metadata"
$TC p4template get metadata/redirect_l2_pna_1t_lpm

####################################
# Create Actions + defined Externs #
####################################
echo "Creating Actions and externs.."
#sleep 1
# send_nh() just sets metadata which will be used on POA hook
# We have a type "dev" which is not really P4 type
# Other possible types here are port ifindex and port id
# but if we have any of those we will need a translation table.
# Note, here we create the actions specified in the P4 program
$TC p4template create action/redirect_l2_pna_1t_lpm/ingress/send_nh actid 1 \
    param port type dev id 1 \
    param smac type macaddr id 2 \
    param dmac type macaddr id 3 \
    cmd set hdrfield.redirect_l2_pna_1t_lpm.redirect_l2_pna_1t_lpm_parser.ethernet.dstAddr param.dmac \
    cmd set hdrfield.redirect_l2_pna_1t_lpm.redirect_l2_pna_1t_lpm_parser.ethernet.srcAddr param.smac \
    cmd set metadata.redirect_l2_pna_1t_lpm.output_port  param.port

# activate
$TC p4template update action/redirect_l2_pna_1t_lpm/ingress/send_nh state active

$TC p4template create action/redirect_l2_pna_1t_lpm/ingress/drop actid 2 \
    cmd set metadata.redirect_l2_pna_1t_lpm.global/drop constant.bit1.1

# activate
$TC p4template update action/redirect_l2_pna_1t_lpm/ingress/drop state active

################## Tables ###############################

#########################################################
# Declare table "nh_table" and associated infrastructure
#########################################################

$TC p4template create table/redirect_l2_pna_1t_lpm/ingress/nh_table \
	tblid 1  keysz 32 type lpm tentries 262144 nummasks 32 \
	table_acts act name redirect_l2_pna_1t_lpm/ingress/send_nh flags tableonly \
	act name redirect_l2_pna_1t_lpm/ingress/drop flags defaultonly

# Table "nh_table" key build: T_nh_table_key_action
###################################################
# Create code that will process the key for table nh_table
# chosen naming convenction for this action is T_<Table name>_PRA
# note: right now, the only thing we are doing in table preaction is
#       key selection
$TC p4template create action/redirect_l2_pna_1t_lpm/nh_table/T_nh_table_key_action \
	cmd set key.redirect_l2_pna_1t_lpm.ingress/nh_table \
        hdrfield.redirect_l2_pna_1t_lpm.redirect_l2_pna_1t_lpm_parser.ipv4.srcAddr
#Activate
$TC p4template update action/redirect_l2_pna_1t_lpm/nh_table/T_nh_table_key_action state active

#bind the key action to the table "nh_table" for creation
$TC p4template update table/redirect_l2_pna_1t_lpm/ingress/nh_table \
	key action redirect_l2_pna_1t_lpm/nh_table/T_nh_table_key_action

# Table "nh_table" postaction T_nh_table_POA
##################################################
#naming convention is T_<Table Name>_POA
#
# note for this case it is not needed but we will create it here
# because current code expects it..
# XXX: code needs fixing..

$TC p4template create action/redirect_l2_pna_1t_lpm/nh_table/T_nh_table_POA

$TC p4template update action/redirect_l2_pna_1t_lpm/nh_table/T_nh_table_POA state active

$TC p4template update table/redirect_l2_pna_1t_lpm/ingress/nh_table postactions \
    action redirect_l2_pna_1t_lpm/nh_table/T_nh_table_POA

# Table "nh_table" miss default action T_nh_table_miss
############################################################
# Create default miss action which happens to be a const
# Naming: T_<Table name>_miss if we have to create from scratch
# in this case it is PNA's drop which sets the drop metadata
$TC p4template update table/redirect_l2_pna_1t_lpm/ingress/nh_table \
    default_miss_action permissions 0x109 action redirect_l2_pna_1t_lpm/ingress/drop

#
##########################################
# Define pipeline pre/post infrastructure#
##########################################

# Define pipeline preaction PPREA
##################################

$TC p4template create action/redirect_l2_pna_1t_lpm/PPREA \
 cmd tableapply table.redirect_l2_pna_1t_lpm.ingress/nh_table

#activate action
$TC p4template update action/redirect_l2_pna_1t_lpm/PPREA state active

#bind
$TC p4template update pipeline/redirect_l2_pna_1t_lpm preactions action redirect_l2_pna_1t_lpm/PPREA

# Define pipeline postaction PPOA
##################################
#Naming convention for pipeline postaction is PPOA

############### Pipeline Postactions ###########################
$TC p4template create action/redirect_l2_pna_1t_lpm/PPOA  \
	cmd beq metadata.redirect_l2_pna_1t_lpm.global/drop constant.bit1.1 control drop / pipe \
	cmd send_port_egress metadata.redirect_l2_pna_1t_lpm.output_port

$TC p4template update action/redirect_l2_pna_1t_lpm/PPOA state active

$TC p4template update pipeline/redirect_l2_pna_1t_lpm postactions action redirect_l2_pna_1t_lpm/PPOA

# Seal pipeline
$TC p4template update pipeline/redirect_l2_pna_1t_lpm state ready
